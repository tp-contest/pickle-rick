/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DatabaseApi.h
 *
 *
 */

#ifndef DatabaseApi_H_
#define DatabaseApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "Contest.h"
#include "ContestData.h"
#include "Solution.h"
#include "SolutionData.h"
#include "Task.h"
#include "TaskData.h"
#include "User.h"
#include "UserData.h"
#include "UserSessionId.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class DatabaseApi {
 public:
  DatabaseApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~DatabaseApi() {}
  void init();

  const std::string base = "";

 private:
  void setupRoutes();

  void create_contest_handler(const Pistache::Rest::Request &request,
                              Pistache::Http::ResponseWriter response);
  void create_session_id_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void create_solution_handler(const Pistache::Rest::Request &request,
                               Pistache::Http::ResponseWriter response);
  void create_task_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void createuser_handler(const Pistache::Rest::Request &request,
                          Pistache::Http::ResponseWriter response);
  void get_contest_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void get_last_solution_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void get_session_id_handler(const Pistache::Rest::Request &request,
                              Pistache::Http::ResponseWriter response);
  void get_solution_handler(const Pistache::Rest::Request &request,
                            Pistache::Http::ResponseWriter response);
  void get_task_handler(const Pistache::Rest::Request &request,
                        Pistache::Http::ResponseWriter response);
  void get_user_handler(const Pistache::Rest::Request &request,
                        Pistache::Http::ResponseWriter response);
  void update_session_id_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void database_api_default_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestData"> (optional)</param>
  virtual void create_contest(const ContestData &contestData,
                              Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="userSessionId"> (optional)</param>
  virtual void create_session_id(const UserSessionId &userSessionId,
                                 Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="solutionData"> (optional)</param>
  virtual void create_solution(const SolutionData &solutionData,
                               Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="taskData"> (optional)</param>
  virtual void create_task(const TaskData &taskData,
                           Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="userData"> (optional)</param>
  virtual void createuser(const UserData &userData,
                          Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestId"></param>
  virtual void get_contest(const Pistache::Optional<int32_t> &contestId,
                           Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="taskId"></param>
  virtual void get_last_solution(const Pistache::Optional<int32_t> &taskId,
                                 Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="userId"></param>
  virtual void get_session_id(const Pistache::Optional<int32_t> &userId,
                              Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="solutionId"></param>
  virtual void get_solution(const Pistache::Optional<int32_t> &solutionId,
                            Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="taskId"></param>
  virtual void get_task(const Pistache::Optional<int32_t> &taskId,
                        Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="userData"> (optional)</param>
  virtual void get_user(const UserData &userData,
                        Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="userSessionId"> (optional)</param>
  virtual void update_session_id(const UserSessionId &userSessionId,
                                 Pistache::Http::ResponseWriter &response) = 0;
};

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org

#endif /* DatabaseApi_H_ */
