/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "StorageApi.h"
#include "Helpers.h"

using namespace server::helper;

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

StorageApi::StorageApi(std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
};

void StorageApi::init() { setupRoutes(); }

void StorageApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(*router, base + "/storage/getContestFiles",
               Routes::bind(&StorageApi::get_contest_files_handler, this));
  Routes::Post(*router, base + "/storage/getSolutionFiles",
               Routes::bind(&StorageApi::get_solution_files_handler, this));
  Routes::Post(*router, base + "/storage/getTaskFile",
               Routes::bind(&StorageApi::get_task_file_handler, this));
  Routes::Post(*router, base + "/storage/uploadContestFiles",
               Routes::bind(&StorageApi::upload_contest_files_handler, this));
  Routes::Post(*router, base + "/storage/uploadSolutionFiles",
               Routes::bind(&StorageApi::upload_solution_files_handler, this));
  Routes::Post(*router, base + "/storage/uploadTaskFile",
               Routes::bind(&StorageApi::upload_task_file_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&StorageApi::storage_api_default_handler, this));
}

void StorageApi::get_contest_files_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the body param

  Contest contest;

  try {
    nlohmann::json::parse(request.body()).get_to(contest);
    this->get_contest_files(contest, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void StorageApi::get_solution_files_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the body param

  Solution solution;

  // Getting the query params
  auto contestCreaterUserIdQuery = request.query().get("contestCreaterUserId");
  Pistache::Optional<int32_t> contestCreaterUserId;
  if (!contestCreaterUserIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(contestCreaterUserIdQuery.get(), value)) {
      contestCreaterUserId = Pistache::Some(value);
    }
  }
  auto contestIdQuery = request.query().get("contestId");
  Pistache::Optional<int32_t> contestId;
  if (!contestIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(contestIdQuery.get(), value)) {
      contestId = Pistache::Some(value);
    }
  }
  auto userIdQuery = request.query().get("userId");
  Pistache::Optional<int32_t> userId;
  if (!userIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(userIdQuery.get(), value)) {
      userId = Pistache::Some(value);
    }
  }

  try {
    nlohmann::json::parse(request.body()).get_to(solution);
    this->get_solution_files(contestCreaterUserId, contestId, userId, solution,
                             response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void StorageApi::get_task_file_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the body param

  Task task;

  // Getting the query params
  auto contestCreaterUserIdQuery = request.query().get("contestCreaterUserId");
  Pistache::Optional<int32_t> contestCreaterUserId;
  if (!contestCreaterUserIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(contestCreaterUserIdQuery.get(), value)) {
      contestCreaterUserId = Pistache::Some(value);
    }
  }

  try {
    nlohmann::json::parse(request.body()).get_to(task);
    this->get_task_file(contestCreaterUserId, task, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void StorageApi::upload_contest_files_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->upload_contest_files(request, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void StorageApi::upload_solution_files_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->upload_solution_files(request, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void StorageApi::upload_task_file_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->upload_task_file(request, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}

void StorageApi::storage_api_default_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
