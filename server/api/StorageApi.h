/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * StorageApi.h
 *
 *
 */

#ifndef StorageApi_H_
#define StorageApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include <string>
#include "Contest.h"
#include "ContestFiles.h"
#include "ContestFilesId.h"
#include "Solution.h"
#include "SolutionFiles.h"
#include "SolutionFilesId.h"
#include "Task.h"
#include "TaskFile.h"
#include "TaskFileId.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class StorageApi {
 public:
  StorageApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~StorageApi() {}
  void init();

  const std::string base = "";

 private:
  void setupRoutes();

  void get_contest_files_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void get_solution_files_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void get_task_file_handler(const Pistache::Rest::Request &request,
                             Pistache::Http::ResponseWriter response);
  void upload_contest_files_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void upload_solution_files_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void upload_task_file_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void storage_api_default_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contest"> (optional)</param>
  virtual void get_contest_files(const Contest &contest,
                                 Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="contestId"></param>
  /// <param name="userId"></param>
  /// <param name="solution"> (optional)</param>
  virtual void get_solution_files(
      const Pistache::Optional<int32_t> &contestCreaterUserId,
      const Pistache::Optional<int32_t> &contestId,
      const Pistache::Optional<int32_t> &userId, const Solution &solution,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="task"> (optional)</param>
  virtual void get_task_file(
      const Pistache::Optional<int32_t> &contestCreaterUserId, const Task &task,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void upload_contest_files(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void upload_solution_files(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void upload_task_file(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter &response) = 0;
};

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org

#endif /* StorageApi_H_ */
