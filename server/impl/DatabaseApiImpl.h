/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * DatabaseApiImpl.h
 *
 *
 */

#ifndef DATABASE_API_IMPL_H_
#define DATABASE_API_IMPL_H_

#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>

#include <DatabaseApi.h>

#include <pistache/optional.h>

#include "Contest.h"
#include "ContestData.h"
#include "Solution.h"
#include "SolutionData.h"
#include "Task.h"
#include "TaskData.h"
#include "User.h"
#include "UserData.h"
#include "UserSessionId.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class DatabaseApiImpl : public org::openapitools::server::api::DatabaseApi {
 public:
  DatabaseApiImpl(std::shared_ptr<Pistache::Rest::Router>);
  ~DatabaseApiImpl() {}

  void create_contest(const ContestData &contestData,
                      Pistache::Http::ResponseWriter &response);
  void create_session_id(const UserSessionId &userSessionId,
                         Pistache::Http::ResponseWriter &response);
  void create_solution(const SolutionData &solutionData,
                       Pistache::Http::ResponseWriter &response);
  void create_task(const TaskData &taskData,
                   Pistache::Http::ResponseWriter &response);
  void createuser(const UserData &userData,
                  Pistache::Http::ResponseWriter &response);
  void get_contest(const Pistache::Optional<int32_t> &contestId,
                   Pistache::Http::ResponseWriter &response);
  void get_last_solution(const Pistache::Optional<int32_t> &taskId,
                         Pistache::Http::ResponseWriter &response);
  void get_session_id(const Pistache::Optional<int32_t> &userId,
                      Pistache::Http::ResponseWriter &response);
  void get_solution(const Pistache::Optional<int32_t> &solutionId,
                    Pistache::Http::ResponseWriter &response);
  void get_task(const Pistache::Optional<int32_t> &taskId,
                Pistache::Http::ResponseWriter &response);
  void get_user(const UserData &userData,
                Pistache::Http::ResponseWriter &response);
  void update_session_id(const UserSessionId &userSessionId,
                         Pistache::Http::ResponseWriter &response);
};

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org

#endif