/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DatabaseApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DatabaseApiImpl::DatabaseApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : DatabaseApi(rtr) {}

void DatabaseApiImpl::create_contest(const ContestData &contestData,
                                     Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::create_session_id(
    const UserSessionId &userSessionId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::create_solution(
    const SolutionData &solutionData,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::create_task(const TaskData &taskData,
                                  Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::createuser(const UserData &userData,
                                 Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_contest(const Pistache::Optional<int32_t> &contestId,
                                  Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_last_solution(
    const Pistache::Optional<int32_t> &taskId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_session_id(const Pistache::Optional<int32_t> &userId,
                                     Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_solution(
    const Pistache::Optional<int32_t> &solutionId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_task(const Pistache::Optional<int32_t> &taskId,
                               Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::get_user(const UserData &userData,
                               Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void DatabaseApiImpl::update_session_id(
    const UserSessionId &userSessionId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
