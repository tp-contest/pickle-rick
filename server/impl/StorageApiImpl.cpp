/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "StorageApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

StorageApiImpl::StorageApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : StorageApi(rtr) {}

void StorageApiImpl::get_contest_files(
    const Contest &contest, Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void StorageApiImpl::get_solution_files(
    const Pistache::Optional<int32_t> &contestCreaterUserId,
    const Pistache::Optional<int32_t> &contestId,
    const Pistache::Optional<int32_t> &userId, const Solution &solution,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void StorageApiImpl::get_task_file(
    const Pistache::Optional<int32_t> &contestCreaterUserId, const Task &task,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void StorageApiImpl::upload_contest_files(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void StorageApiImpl::upload_solution_files(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void StorageApiImpl::upload_task_file(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
