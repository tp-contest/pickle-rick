/**
 * TP-Contest Worker
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Slot.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Slot::Slot() {
  m_Name = utility::conversions::to_string_t("");
  m_Count = 0;
}

Slot::~Slot() {}

void Slot::validate() {
  // TODO: implement validation
}

web::json::value Slot::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
  val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);

  return val;
}

void Slot::fromJson(const web::json::value& val) {
  setName(ModelBase::stringFromJson(
      val.at(utility::conversions::to_string_t("name"))));
  setCount(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("count"))));
}

void Slot::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                       const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("name"), m_Name));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("count"), m_Count));
}

void Slot::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                         const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setName(ModelBase::stringFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("name"))));
  setCount(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("count"))));
}

utility::string_t Slot::getName() const { return m_Name; }

void Slot::setName(const utility::string_t& value) { m_Name = value; }

int32_t Slot::getCount() const { return m_Count; }

void Slot::setCount(int32_t value) { m_Count = value; }

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
