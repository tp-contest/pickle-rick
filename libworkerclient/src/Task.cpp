/**
 * TP-Contest Worker
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Task.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Task::Task() {
  m_Task_id = 0;
  m_User_id = 0;
  m_Contest_id = 0;
  m_Task_file_id = 0;
}

Task::~Task() {}

void Task::validate() {
  // TODO: implement validation
}

web::json::value Task::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("task_id")] =
      ModelBase::toJson(m_Task_id);
  val[utility::conversions::to_string_t("user_id")] =
      ModelBase::toJson(m_User_id);
  val[utility::conversions::to_string_t("contest_id")] =
      ModelBase::toJson(m_Contest_id);
  val[utility::conversions::to_string_t("task_file_id")] =
      ModelBase::toJson(m_Task_file_id);

  return val;
}

void Task::fromJson(const web::json::value& val) {
  setTaskId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("task_id"))));
  setUserId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("user_id"))));
  setContestId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("contest_id"))));
  setTaskFileId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("task_file_id"))));
}

void Task::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                       const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("task_id"), m_Task_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("contest_id"),
      m_Contest_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("task_file_id"),
      m_Task_file_id));
}

void Task::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                         const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setTaskId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("task_id"))));
  setUserId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("user_id"))));
  setContestId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("contest_id"))));
  setTaskFileId(ModelBase::int32_tFromHttpContent(multipart->getContent(
      utility::conversions::to_string_t("task_file_id"))));
}

int32_t Task::getTaskId() const { return m_Task_id; }

void Task::setTaskId(int32_t value) { m_Task_id = value; }

int32_t Task::getUserId() const { return m_User_id; }

void Task::setUserId(int32_t value) { m_User_id = value; }

int32_t Task::getContestId() const { return m_Contest_id; }

void Task::setContestId(int32_t value) { m_Contest_id = value; }

int32_t Task::getTaskFileId() const { return m_Task_file_id; }

void Task::setTaskFileId(int32_t value) { m_Task_file_id = value; }

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
